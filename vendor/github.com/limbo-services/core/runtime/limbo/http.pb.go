// Code generated by protoc-gen-gogo.
// source: github.com/limbo-services/core/runtime/limbo/http.proto
// DO NOT EDIT!

package limbo

import proto "github.com/limbo-services/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/limbo-services/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HttpRule struct {
	Paged        bool        `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize     uint32      `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Tags         []string    `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Alternatives []*HttpRule `protobuf:"bytes,200,rep,name=alternatives" json:"alternatives,omitempty"`
	// Types that are valid to be assigned to Pattern:
	//	*HttpRule_Get
	//	*HttpRule_Post
	//	*HttpRule_Patch
	//	*HttpRule_Put
	//	*HttpRule_Delete
	Pattern isHttpRule_Pattern `protobuf_oneof:"pattern"`
}

func (m *HttpRule) Reset()         { *m = HttpRule{} }
func (m *HttpRule) String() string { return proto.CompactTextString(m) }
func (*HttpRule) ProtoMessage()    {}

type isHttpRule_Pattern interface {
	isHttpRule_Pattern()
}

type HttpRule_Get struct {
	Get string `protobuf:"bytes,101,opt,name=get,proto3,oneof"`
}
type HttpRule_Post struct {
	Post string `protobuf:"bytes,102,opt,name=post,proto3,oneof"`
}
type HttpRule_Patch struct {
	Patch string `protobuf:"bytes,103,opt,name=patch,proto3,oneof"`
}
type HttpRule_Put struct {
	Put string `protobuf:"bytes,104,opt,name=put,proto3,oneof"`
}
type HttpRule_Delete struct {
	Delete string `protobuf:"bytes,105,opt,name=delete,proto3,oneof"`
}

func (*HttpRule_Get) isHttpRule_Pattern()    {}
func (*HttpRule_Post) isHttpRule_Pattern()   {}
func (*HttpRule_Patch) isHttpRule_Pattern()  {}
func (*HttpRule_Put) isHttpRule_Pattern()    {}
func (*HttpRule_Delete) isHttpRule_Pattern() {}

func (m *HttpRule) GetPattern() isHttpRule_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *HttpRule) GetAlternatives() []*HttpRule {
	if m != nil {
		return m.Alternatives
	}
	return nil
}

func (m *HttpRule) GetGet() string {
	if x, ok := m.GetPattern().(*HttpRule_Get); ok {
		return x.Get
	}
	return ""
}

func (m *HttpRule) GetPost() string {
	if x, ok := m.GetPattern().(*HttpRule_Post); ok {
		return x.Post
	}
	return ""
}

func (m *HttpRule) GetPatch() string {
	if x, ok := m.GetPattern().(*HttpRule_Patch); ok {
		return x.Patch
	}
	return ""
}

func (m *HttpRule) GetPut() string {
	if x, ok := m.GetPattern().(*HttpRule_Put); ok {
		return x.Put
	}
	return ""
}

func (m *HttpRule) GetDelete() string {
	if x, ok := m.GetPattern().(*HttpRule_Delete); ok {
		return x.Delete
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _HttpRule_OneofMarshaler, _HttpRule_OneofUnmarshaler, []interface{}{
		(*HttpRule_Get)(nil),
		(*HttpRule_Post)(nil),
		(*HttpRule_Patch)(nil),
		(*HttpRule_Put)(nil),
		(*HttpRule_Delete)(nil),
	}
}

func _HttpRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpRule)
	// pattern
	switch x := m.Pattern.(type) {
	case *HttpRule_Get:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Get)
	case *HttpRule_Post:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Post)
	case *HttpRule_Patch:
		_ = b.EncodeVarint(103<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Patch)
	case *HttpRule_Put:
		_ = b.EncodeVarint(104<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Put)
	case *HttpRule_Delete:
		_ = b.EncodeVarint(105<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Delete)
	case nil:
	default:
		return fmt.Errorf("HttpRule.Pattern has unexpected type %T", x)
	}
	return nil
}

func _HttpRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpRule)
	switch tag {
	case 101: // pattern.get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Get{x}
		return true, err
	case 102: // pattern.post
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Post{x}
		return true, err
	case 103: // pattern.patch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Patch{x}
		return true, err
	case 104: // pattern.put
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Put{x}
		return true, err
	case 105: // pattern.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Pattern = &HttpRule_Delete{x}
		return true, err
	default:
		return false, nil
	}
}

func init() {
	proto.RegisterType((*HttpRule)(nil), "limbo.HttpRule")
}
